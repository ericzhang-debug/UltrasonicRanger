C51 COMPILER V9.60.0.0   GPIO                                                              08/26/2022 16:08:10 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\GPIO.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LIB\GPIO.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\LIB;.\USER;.\CORE;.\HARDW
                    -ARE) DEBUG PRINT(.\Listings\GPIO.lst) TABS(2) OBJECT(.\Objects\GPIO.obj)

line level    source

   1          /***************  功能说明  ****************
   2          
   3          本文件为STC8系列的端口初始化程序,用户几乎可以不修改这个程序.
   4          
   5          ******************************************/
   6          
   7          #include  "GPIO.h"
   8          
   9          //========================================================================
  10          // 函数: u8 GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  11          // 描述: 初始化IO口.
  12          // 参数: GPIOx: 结构参数,请参考timer.h里的定义.
  13          // 返回: 成功返回0, 空操作返回1,错误返回2.
  14          // 版本: V1.0, 2012-10-22
  15          //========================================================================
  16          u8  GPIO_Inilize(u8 GPIO, GPIO_InitTypeDef *GPIOx)
  17          {
  18   1        if(GPIO > GPIO_P7)        return 1; //空操作
  19   1        if(GPIOx->Mode > GPIO_OUT_PP) return 2; //错误
  20   1        if(GPIO == GPIO_P0)
  21   1        {
  22   2          if(GPIOx->Mode == GPIO_PullUp)    P0M1 &= ~GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //上拉准双向口
  23   2          if(GPIOx->Mode == GPIO_HighZ)   P0M1 |=  GPIOx->Pin,  P0M0 &= ~GPIOx->Pin;   //浮空输入
  24   2          if(GPIOx->Mode == GPIO_OUT_OD)    P0M1 |=  GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //开漏输出
  25   2          if(GPIOx->Mode == GPIO_OUT_PP)    P0M1 &= ~GPIOx->Pin,  P0M0 |=  GPIOx->Pin;   //推挽输出
  26   2        }
  27   1        if(GPIO == GPIO_P1)
  28   1        {
  29   2          if(GPIOx->Mode == GPIO_PullUp)    P1M1 &= ~GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //上拉准双向口
  30   2          if(GPIOx->Mode == GPIO_HighZ)   P1M1 |=  GPIOx->Pin,  P1M0 &= ~GPIOx->Pin;   //浮空输入
  31   2          if(GPIOx->Mode == GPIO_OUT_OD)    P1M1 |=  GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //开漏输出
  32   2          if(GPIOx->Mode == GPIO_OUT_PP)    P1M1 &= ~GPIOx->Pin,  P1M0 |=  GPIOx->Pin;   //推挽输出
  33   2        }
  34   1        if(GPIO == GPIO_P2)
  35   1        {
  36   2          if(GPIOx->Mode == GPIO_PullUp)    P2M1 &= ~GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //上拉准双向口
  37   2          if(GPIOx->Mode == GPIO_HighZ)   P2M1 |=  GPIOx->Pin,  P2M0 &= ~GPIOx->Pin;   //浮空输入
  38   2          if(GPIOx->Mode == GPIO_OUT_OD)    P2M1 |=  GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //开漏输出
  39   2          if(GPIOx->Mode == GPIO_OUT_PP)    P2M1 &= ~GPIOx->Pin,  P2M0 |=  GPIOx->Pin;   //推挽输出
  40   2        }
  41   1        if(GPIO == GPIO_P3)
  42   1        {
  43   2          if(GPIOx->Mode == GPIO_PullUp)    P3M1 &= ~GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //上拉准双向口
  44   2          if(GPIOx->Mode == GPIO_HighZ)   P3M1 |=  GPIOx->Pin,  P3M0 &= ~GPIOx->Pin;   //浮空输入
  45   2          if(GPIOx->Mode == GPIO_OUT_OD)    P3M1 |=  GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //开漏输出
  46   2          if(GPIOx->Mode == GPIO_OUT_PP)    P3M1 &= ~GPIOx->Pin,  P3M0 |=  GPIOx->Pin;   //推挽输出
  47   2        }
  48   1        if(GPIO == GPIO_P4)
  49   1        {
  50   2          if(GPIOx->Mode == GPIO_PullUp)    P4M1 &= ~GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //上拉准双向口
  51   2          if(GPIOx->Mode == GPIO_HighZ)   P4M1 |=  GPIOx->Pin,  P4M0 &= ~GPIOx->Pin;   //浮空输入
  52   2          if(GPIOx->Mode == GPIO_OUT_OD)    P4M1 |=  GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //开漏输出
  53   2          if(GPIOx->Mode == GPIO_OUT_PP)    P4M1 &= ~GPIOx->Pin,  P4M0 |=  GPIOx->Pin;   //推挽输出
  54   2        }
C51 COMPILER V9.60.0.0   GPIO                                                              08/26/2022 16:08:10 PAGE 2   

  55   1        if(GPIO == GPIO_P5)
  56   1        {
  57   2          if(GPIOx->Mode == GPIO_PullUp)    P5M1 &= ~GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //上拉准双向口
  58   2          if(GPIOx->Mode == GPIO_HighZ)   P5M1 |=  GPIOx->Pin,  P5M0 &= ~GPIOx->Pin;   //浮空输入
  59   2          if(GPIOx->Mode == GPIO_OUT_OD)    P5M1 |=  GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //开漏输出
  60   2          if(GPIOx->Mode == GPIO_OUT_PP)    P5M1 &= ~GPIOx->Pin,  P5M0 |=  GPIOx->Pin;   //推挽输出
  61   2        }
  62   1        if(GPIO == GPIO_P6)
  63   1        {
  64   2          if(GPIOx->Mode == GPIO_PullUp)    P6M1 &= ~GPIOx->Pin,  P6M0 &= ~GPIOx->Pin;   //上拉准双向口
  65   2          if(GPIOx->Mode == GPIO_HighZ)   P6M1 |=  GPIOx->Pin,  P6M0 &= ~GPIOx->Pin;   //浮空输入
  66   2          if(GPIOx->Mode == GPIO_OUT_OD)    P6M1 |=  GPIOx->Pin,  P6M0 |=  GPIOx->Pin;   //开漏输出
  67   2          if(GPIOx->Mode == GPIO_OUT_PP)    P6M1 &= ~GPIOx->Pin,  P6M0 |=  GPIOx->Pin;   //推挽输出
  68   2        }
  69   1        if(GPIO == GPIO_P7)
  70   1        {
  71   2          if(GPIOx->Mode == GPIO_PullUp)    P7M1 &= ~GPIOx->Pin,  P7M0 &= ~GPIOx->Pin;   //上拉准双向口
  72   2          if(GPIOx->Mode == GPIO_HighZ)   P7M1 |=  GPIOx->Pin,  P7M0 &= ~GPIOx->Pin;   //浮空输入
  73   2          if(GPIOx->Mode == GPIO_OUT_OD)    P7M1 |=  GPIOx->Pin,  P7M0 |=  GPIOx->Pin;   //开漏输出
  74   2          if(GPIOx->Mode == GPIO_OUT_PP)    P7M1 &= ~GPIOx->Pin,  P7M0 |=  GPIOx->Pin;   //推挽输出
  75   2        }
  76   1        return 0; //成功
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    631    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
